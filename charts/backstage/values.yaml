# Default values for backstage.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/lab-ops/backstage
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: "backstage"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "backstage"

podAnnotations: {}
podLabels: {}

podSecurityContext:
  fsGroup: 1000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  port: 7007

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# Additional volumes on the output Deployment definition.
volumes:
  - name: app-config-prod
    configMap:
      name: backstage-config
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
  - name: app-config-prod
    mountPath: "/app/app-config.production.yaml"
    readOnly: true
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

env:
  BACKSTAGE_APP_TITLE: Backstage
  BACKSTAGE_BASE_URL: https://backstage.example.com
  BACKSTAGE_BACKEND_AUTH: false
  BACKSTAGE_BACKEND_SECRET: "secret"
  BACKSTAGE_SEARCH_ENGINE: "database"
  ENVIRONMENT: "production"

secretName: "backstage-secrets"

appConfigOverrides: |
  integrations:
    github:
      - host: github.com
        apps:
          - appId: ${GITHUB_CLIENT_APP_ID}
            webhookUrl: ${GITHUB_CLIENT_WEBHOOK_URL}
            clientId: ${GITHUB_CLIENT_ID}
            clientSecret: ${GITHUB_CLIENT_SECRET}
            webhookSecret: ${GITHUB_CLIENT_WEBHOOK_SECRET}
            privateKey: ${GITHUB_CLIENT_PRIVATE_KEY}

  proxy: {}

  techdocs:
    builder: 'local' # Alternatives - 'external'
    generator:
      runIn: 'local' # Alternatives - 'local'
    publisher:
      type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

  scaffolder: []

  catalog:
    providers:
      github:
        githubOrg:
          organization: ${GITHUB_ORG}
          catalogPath: '/catalog-info.yaml'
          filters:
            branch: 'main' # string
            repository: '.*' # Regex
          schedule: # optional; same options as in TaskScheduleDefinition
            # supports cron, ISO duration, "human duration" as used in code
            frequency: { minutes: 30 }
            # supports ISO duration, "human duration" as used in code
            timeout: { minutes: 3 }

  rules:
    - allow: [Component, System, API, Resource, Location]

  locations: []

  events:
    modules:
      github:
        webhookSecret: ${GITHUB_CLIENT_WEBHOOK_SECRET}

  kubernetes:
    serviceLocatorMethod:
      type: 'multiTenant'
    clusterLocatorMethods:
      - type: 'config'
        clusters:
          - name: local-cluster
            authProvider: 'serviceAccount'
            skipTLSVerify: true
